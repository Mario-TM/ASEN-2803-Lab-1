clc 
close all 
clear


% Parameters
a = -0.005; % coefficient for x^2
b = 0; % coefficient for x
c = 50; % initial height (m)
g = 9.81; % acceleration due to gravity (m/s^2)
mass = 500; % mass of the roller coaster (kg)
initial_speed = 0; % initial speed (m/s)

% Function to calculate the parabolic path
y = @(x) a*x.^2 + b*x + c;

% Derivative of the parabolic path (dy/dx)
dy_dx = @(x) 2*a*x + b;

% Second derivative of the parabolic path (d^2y/dx^2)
d2y_dx2 = 2*a;

% Function to calculate velocity at a given point x
velocity = @(x) sqrt(initial_speed.^2 + 2*g*(c - y(x)));

% Function to calculate the normal force at a given point x
normal_force = @(x) mass * g ./ sqrt(1 + (dy_dx(x)).^2) + ...
                    mass * (velocity(x).^2) * abs(d2y_dx2) ./ (1 + (dy_dx(x)).^2).^(3/2);

% Define the range of x values to evaluate
x_values = linspace(-100, 100, 1000);
height_values = y(x_values);
velocity_values = velocity(x_values);
normal_force_values = normal_force(x_values);

% Plot the results
figure;
subplot(3, 1, 1);
plot(x_values, height_values);
title('Height of the Roller Coaster');
xlabel('x (m)');
ylabel('Height (m)');

subplot(3, 1, 2);
plot(x_values, velocity_values);
title('Velocity of the Roller Coaster');
xlabel('x (m)');
ylabel('Velocity (m/s)');

subplot(3, 1, 3);
plot(x_values, normal_force_values);
title('Normal Force on the Roller Coaster');
xlabel('x (m)');
ylabel('Normal Force (N)');
